package org.augur.dag.builder;

import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.augur.dag.IOSource;
import org.augur.dag.UserDefinedFunction;

/**
 * A notational type used for defining the user defined functions and the
 * input and output sources for them.
 *
 * @author Balraja Subbiah
 * @version $Id:$
 */
public class UDFSpecification
{
    private final Class<? extends UserDefinedFunction> myFunctionClass;

    private final String myIdentifier;

    private FunctionInputs myInputs;

    private final Map<String, FunctionOutput> myKey2Outputs;

    private IOSource myOutputIoSource;

    private final Map<String, Object> myOutputAttributes;

    /**
     * CTOR
     */
    public UDFSpecification(String identifier,
                            Class<? extends UserDefinedFunction> functionClass)
    {
        myIdentifier = identifier;
        myFunctionClass = functionClass;
        myKey2Outputs = new HashMap<String, FunctionOutput>();
        myOutputAttributes = new HashMap<String, Object>();
    }

    /**
     * Returns the inputs corresponding to the given function.
     */
    public UDFSpecification applyOn(FunctionInputs inputs)
    {
        myInputs = inputs;
        return this;
    }

    /** Returns the combination of inputs to be processed by this function */
    public FunctionInputs getFunctionInputs()
    {
        return myInputs;
    }

    /** Defines the outputs to be generated by this function */
    public UDFSpecification toProduce(String... outputs)
    {
        for (String output : outputs) {
            myKey2Outputs.put(output, new FunctionOutput(output, this));
        }
        return this;
    }

    /** Returns the definition of function output for the given function */
    public FunctionOutput getFunctionOutput(String outputKey)
    {
        return myKey2Outputs.get(outputKey);
    }

    /** Returns a collection of <code>FunctionOutput</code>s */
    public Collection<FunctionOutput> getFunctionOutputs()
    {
        return myKey2Outputs.values();
    }

    /** Returns the name of user defined functions */
    public String getUDFName()
    {
        return myFunctionClass.getName();
    }

    /**
     * Returns the value of identifier
     */
    public String getIdentifier()
    {
        return myIdentifier;
    }

    /**
     * Returns the value of outputIoSource
     */
    public IOSource getOutputIoSource()
    {
        return myOutputIoSource;
    }

    /**
     * Sets the value of outputIoSource.
     */
    public UDFSpecification setOutputIoSource(IOSource outputIoSource)
    {
        myOutputIoSource = outputIoSource;
        return this;
    }

    /**
     * Returns the value of outputAttributes
     */
    public Object getOutputAttribute(String key)
    {
        return myOutputAttributes.get(key);
    }

    /**
     * Sets the attribute for a given key.
     */
    public UDFSpecification setAttribute(String key, Object attribute)
    {
        myOutputAttributes.put(key, attribute);
        return this;
    }

    public List<String> getParallelFunctionIds()
    {
        return
            myInputs.getNumCombinations() == 1 ?
            Collections.singletonList(myIdentifier)
            : new FragmentKeyList(myIdentifier,
                                  myInputs.getNumCombinations());
    }
}
